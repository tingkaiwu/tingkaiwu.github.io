<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TINGKAI&#39;S BLOG</title>
  
  <subtitle>REAL DREAMERS DON&#39;T SLEEP</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tingkaiwu.com/"/>
  <updated>2020-06-17T18:52:16.703Z</updated>
  <id>http://tingkaiwu.com/</id>
  
  <author>
    <name>TingKai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>High level overview of Redux</title>
    <link href="http://tingkaiwu.com/2019/01/17/high-level-overview-of-redux/"/>
    <id>http://tingkaiwu.com/2019/01/17/high-level-overview-of-redux/</id>
    <published>2019-01-17T10:22:34.000Z</published>
    <updated>2020-06-17T18:52:16.703Z</updated>
    
    <content type="html"><![CDATA[<p>Redux is inspired by Flux and Elm architecture. So, be sure to understand what Flux is before reading this article. Flux is a one-way data flow design pattern that helps you write a structured front-end architecture. If you want to explore Flux in more depth, you can refer to this - <a href="http://tingkaiwu.com/2019/01/12/lets-talk-about-flux/">LET’S TALK ABOUT FLUX</a></p><a id="more"></a><br><h1 id="Quick-walkthrough-Flux"><a href="#Quick-walkthrough-Flux" class="headerlink" title="Quick walkthrough Flux"></a>Quick walkthrough Flux</h1><p><img src="https://drive.google.com/uc?export=view&id=1wqpOMUrlUZqzEXpS1hfoVouA9XPEEddl" alt="Flux flow"><br><strong>Pros:</strong></p><ul><li>One-way data flow: The behavior of changing data must go through Action, Dispatcher, and then to the Store.</li><li>Single Source of Truth: The data is stored in the Store in a unified manner, and all the data required by the Viewer must be obtained from the Store.</li><li>Use a clearer model to regulate the flow of data in complex interaction scenarios of data and pages.</li></ul><p><strong>Cons:</strong></p><ul><li>The store contains logic and state. When we need to dynamically replace the logic of a store, we can only replace the entire store, and then we cannot maintain the state stored in the store.<br><br><br></li></ul><h1 id="Redux-vs-Flux"><a href="#Redux-vs-Flux" class="headerlink" title="Redux vs Flux"></a>Redux vs Flux</h1><p><img src="https://drive.google.com/uc?export=view&id=1LZcMODJi0K8fKsq6ckYzWLiSqAAg83tb" alt="Redux vs Flux"></p><table><thead><tr><th align="left">Flux</th><th align="left">Redux</th></tr></thead><tbody><tr><td align="left">Flux provides Dispatcher to deliver action objects to each store</td><td align="left">Redux Store provides dispatch API to deliver action objects</td></tr><tr><td align="left">Flux has multiple stores</td><td align="left">Redux has only one store</td></tr><tr><td align="left">Data is stored in each store</td><td align="left">Data is stored in a state object and managed by the Store</td></tr><tr><td align="left">Business logic is stored in each store</td><td align="left">Business logic corresponds to multiple Reducers functions</td></tr></tbody></table><p><br><br></p><h1 id="Redux-core-concepts"><a href="#Redux-core-concepts" class="headerlink" title="Redux core concepts"></a>Redux core concepts</h1><p><img src="https://drive.google.com/uc?export=view&id=1zSL7wx_mmzSHksm3sPkmt0CvdiXCNHu8" alt="Redux core concepts"></p><ul><li>Single state tree</li><li>Action description changes</li><li>Reducer implementation changes<br><br><br></li></ul><h1 id="Redux-from-the-code"><a href="#Redux-from-the-code" class="headerlink" title="Redux from the code"></a>Redux from the code</h1><p>The concept of Store in Redux is very simple, the following code:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> listeners = []</span><br><span class="line">// 1. Only one status tree <span class="keyword">in</span> Redux <span class="built_in">which</span> stores all data</span><br><span class="line"><span class="built_in">let</span> state</span><br><span class="line"></span><br><span class="line">// 2. When user trigger events, call store.dispatch(action)</span><br><span class="line"><span class="keyword">function</span> dispatch(action) &#123;</span><br><span class="line">  // 3. Get the latest status according to reducer</span><br><span class="line">  state = reducer(state, action)</span><br><span class="line">  // 4. Notify all listener store status has changed</span><br><span class="line">  listeners.slice().forEach(l =&gt; l())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 5. Call the getter API to get the latest status</span><br><span class="line">//    when the viewer knows that the Store status has changed</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getState</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 6. Let viewer registration status change listener</span><br><span class="line"><span class="keyword">function</span> subscribe(listener) &#123;</span><br><span class="line">  listeners.push(listener)</span><br><span class="line">  // 7. Return unsubscribe <span class="keyword">function</span></span><br><span class="line">  <span class="built_in">return</span> () =&gt; listeners.filter(l =&gt; l !== listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Redux is a very simple state container that manages the state of the entire application. You can not change the data directly through the setter, new data must be obtained through the action and reducers.</p><p>The reducer returns new data based on the action object and old data, so you can store the action and call the reducer function again to get the same state. It helps us with predictable state management.</p><p>Therefore, Redux can be summarized in a sentence:</p><p><strong>“Redux is a predictable state container for JavaScript apps.”</strong><br><br><br><br><br></p><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/4cats-io/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-redux-7b08403c4957" target="_blank" rel="noopener">https://medium.com/4cats-io/-redux-7b08403c4957</a><br><a href="https://blog.quizup.com/react-in-retrospective-quizup-db1dcc0dc8a1" target="_blank" rel="noopener">https://blog.quizup.com/react-in-retrospective-quizup-db1dcc0dc8a1</a><br><a href="https://blog.csdn.net/DFF1993/article/details/80403309" target="_blank" rel="noopener">https://blog.csdn.net/DFF1993/article/details/80403309</a></p>]]></content>
    
    <summary type="html">
    
      “Redux is a predictable state container for JavaScript apps.”
    
    </summary>
    
    
      <category term="React Ecosystem" scheme="http://tingkaiwu.com/categories/React-Ecosystem/"/>
    
    
      <category term="Redux" scheme="http://tingkaiwu.com/tags/Redux/"/>
    
      <category term="Flux" scheme="http://tingkaiwu.com/tags/Flux/"/>
    
      <category term="React" scheme="http://tingkaiwu.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s talk about Flux</title>
    <link href="http://tingkaiwu.com/2019/01/12/lets-talk-about-flux/"/>
    <id>http://tingkaiwu.com/2019/01/12/lets-talk-about-flux/</id>
    <published>2019-01-12T05:33:37.000Z</published>
    <updated>2020-06-17T09:46:04.927Z</updated>
    
    <content type="html"><![CDATA[<p>In the highly interactive front-end applications, the data state of the application and the user’s operation events are the most vexing. Therefore, when we are dealing with complex interactions such as “event changes state, state refresh UI”. A pattern is needed to regulate the data flow of the application. Flux is used to solve these problems.</p><a id="more"></a><br><h1 id="Flux-origin"><a href="#Flux-origin" class="headerlink" title="Flux origin"></a>Flux origin</h1><p>Flux is a design concept proposed by Facebook. Its most important thinking is one-way data flow.</p><p><img src="https://drive.google.com/uc?export=view&id=10I3eiAoPrFEtccK7mW52vP9eK22Aqpw5" alt="Flux vs MVC"></p><p>Although not all MVC implementations are as shown above. It is easy to cause maintenance problems because of the two-way data flow. However, Flux clearly defines the roles’ responsibilities and each role’s interactions, which improves maintainability. Flux is a one-way data flow design concept, not a library, so it has a variety of implementations.<br><br></p><h1 id="Flux-composition"><a href="#Flux-composition" class="headerlink" title="Flux composition"></a>Flux composition</h1><p><img src="https://drive.google.com/uc?export=view&id=1wqpOMUrlUZqzEXpS1hfoVouA9XPEEddl" alt="Flux flow"><br><strong>The main roles in Flux:</strong></p><ul><li>Action: Standardize all actions to change data, so you can quickly master the behavior of the entire App.</li><li>Action Creator: Responsible for creating action and passing action to dispatcher.</li><li>Dispatcher: Inform all registered stores of the current behavior.</li><li>Store: Store data and business logic, and only provide getter API for other modules to obtain data.</li><li>Controller View: Responsible for registering the listener with the store, and obtaining the latest data to pass to the view.</li><li>View: Render the UI according to the data and listen to the user’s operation events.<br><br><br></li></ul><h1 id="Flux-process-flow"><a href="#Flux-process-flow" class="headerlink" title="Flux process flow"></a>Flux process flow</h1><p><img src="https://drive.google.com/uc?export=view&id=16ALtl2eboAq5JfV37lL45DIaj_NfcUoh" alt="Flux flow detail"></p><ol><li>User operation app.</li><li>Action creator creates the action and passes it to dispatcher.</li><li>The dispatcher sequentially passes the action to the store.</li><li>The store determines whether the data needs to be updated according to the action type.</li><li>If the data is updated, then trigger the controller view listener.</li><li>Controller view gets the latest data from the store.</li><li>View re-renders the UI based on the data.<br><br><br></li></ol><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Flux is a one-way data flow design pattern that helps you write a structured front-end architecture.</p><p>The benefits Flux brings to you are:</p><ol><li>You can quickly master the behavior in the entire app.</li><li>Information and business logic are also stored uniformly.</li><li>Let View only need to be responsible for the layout of the UI.<br><br><br><br><br></li></ol><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/4cats-io/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-flux-44a48c320e11" target="_blank" rel="noopener">https://medium.com/4cats-io/flux-44a48c320e11</a><br><a href="https://medium.com/@w3bh4ck/the-flux-architecture-pattern-for-frontend-development-1f2dae32b789" target="_blank" rel="noopener">https://medium.com/@w3bh4ck/the-flux-architecture-pattern</a></p>]]></content>
    
    <summary type="html">
    
      Flux is a one-way data flow design pattern that helps you write a structured front-end architecture.
    
    </summary>
    
    
      <category term="React Ecosystem" scheme="http://tingkaiwu.com/categories/React-Ecosystem/"/>
    
    
      <category term="Redux" scheme="http://tingkaiwu.com/tags/Redux/"/>
    
      <category term="Flux" scheme="http://tingkaiwu.com/tags/Flux/"/>
    
      <category term="React" scheme="http://tingkaiwu.com/tags/React/"/>
    
  </entry>
  
</feed>
