<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TINGKAI&#39;S BLOG</title>
  
  <subtitle>REAL DREAMERS DON&#39;T SLEEP</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tingkaiwu.com/"/>
  <updated>2020-06-18T20:56:26.668Z</updated>
  <id>http://tingkaiwu.com/</id>
  
  <author>
    <name>TingKai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dive into Middleware - Principles</title>
    <link href="http://tingkaiwu.com/2019/02/09/deep-dive-into-middleware-3/"/>
    <id>http://tingkaiwu.com/2019/02/09/deep-dive-into-middleware-3/</id>
    <published>2019-02-09T20:33:38.000Z</published>
    <updated>2020-06-18T20:56:26.668Z</updated>
    
    <content type="html"><![CDATA[<p>After reading the previous article - <a href="http://tingkaiwu.com/2019/02/03/deep-dive-into-middleware-2/">Dive into Middleware - Implementation</a>, there must be some questions. First of all, Middleware should be able to process the Action after it is dispatched and before entering the Reducer. So Middleware should be a function that can get the action parameters:</p><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> middleware(action) &#123;&#125;</span><br></pre></td></tr></table></figure><p>Then, in order to be able to chain multiple Middleware, Middleware should be able to get a current dispatch() function and return a function that will call the dispatch(), so derived from the above form:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> middlewareWrapper(dispatch) &#123;</span><br><span class="line">  <span class="built_in">return</span> <span class="keyword">function</span>(action) &#123;</span><br><span class="line">    dispatch(action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, in order to get the current state or re-dispatch an action, Middleware needs to get the store parameter, so wrap it with another layer:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> storeWrapper(store)</span><br><span class="line">  <span class="keyword">function</span> middlewareWrapper(dispatch) &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span>(action) &#123;</span><br><span class="line">      dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rewrite in ES6 Arrow Function:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const = storeWrapper = store =&gt; dispatch =&gt; action =&gt; &#123;</span><br><span class="line">  dispatch(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function and parameter names are changed to customary naming:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const middleware = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">  next(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="How-does-Redux-apply-multiple-Middleware"><a href="#How-does-Redux-apply-multiple-Middleware" class="headerlink" title="How does Redux apply multiple Middleware?"></a>How does Redux apply multiple Middleware?</h1><p>Redux applies multiple Middleware, mainly in the function applyMiddleware, The following is an applyMiddleware function that imitates Redux official source code and can be applied to three Middleware:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> applyMiddleware(middleware1, middleware2, middleware3) &#123;</span><br><span class="line">  const store = &#123;</span><br><span class="line">    dispatch: action =&gt; action</span><br><span class="line">  &#125;;</span><br><span class="line">  const [mw1, mw2, mw3] = [middleware1, middleware2, middleware3].map(middleware =&gt; middleware(store))</span><br><span class="line">  store.dispatch = mw1(mw2(mw3(store.dispatch)))</span><br><span class="line">  <span class="built_in">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Most of the time we use Redux Middleware written by others directly and rarely implement it ourselves, but if we try to understand the logic behind Redux Middleware, we can better use Redux Middleware to solve the problem.<br><br><br><br><br></p><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/@max80713/%E8%A9%B3%E8%A7%A3-redux-middleware-efd6a506357e" target="_blank" rel="noopener">https://medium.com/@max80713/redux-middleware-efd6a506357e</a><br><a href="https://medium.com/@WendellLiu/redux-middleware%E5%A4%A7%E7%95%A5%E6%9E%B6%E6%A7%8B-ace7e646c929" target="_blank" rel="noopener">https://medium.com/@WendellLiu/redux-middleware-ace7e646c929</a></p>]]></content>
    
    <summary type="html">
    
      Why should Middleware declare it as store =&gt; next =&gt; action =&gt; {}?
    
    </summary>
    
    
      <category term="Middleware Trilogy" scheme="http://tingkaiwu.com/categories/Middleware-Trilogy/"/>
    
    
      <category term="Middleware" scheme="http://tingkaiwu.com/tags/Middleware/"/>
    
      <category term="Redux" scheme="http://tingkaiwu.com/tags/Redux/"/>
    
      <category term="React" scheme="http://tingkaiwu.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Dive into Middleware - Implementation</title>
    <link href="http://tingkaiwu.com/2019/02/03/deep-dive-into-middleware-2/"/>
    <id>http://tingkaiwu.com/2019/02/03/deep-dive-into-middleware-2/</id>
    <published>2019-02-03T19:00:13.000Z</published>
    <updated>2020-06-18T20:24:20.223Z</updated>
    
    <content type="html"><![CDATA[<p>Continued from the previous article - <a href="http://tingkaiwu.com/2019/01/29/deep-dive-into-middleware-1/">Dive into Middleware - Introduction</a>. Let’s continue to talk about how to use Middleware. The following is a Dummy Middleware, which represents the basic architecture of a Middleware, which can also be expressed by ES6 Arrow Function:</p><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> middleware(store) &#123;</span><br><span class="line">  <span class="built_in">return</span> <span class="keyword">function</span>(next) &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span>(action) &#123;</span><br><span class="line">      </span><br><span class="line">      /* Code */</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">return</span> next(action);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 Arrow Function Implementation:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const middleware = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">  /* Code */</span><br><span class="line">  <span class="built_in">return</span> next(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="What-does-next-in-Middleware-do"><a href="#What-does-next-in-Middleware-do" class="headerlink" title="What does next() in Middleware do?"></a>What does next() in Middleware do?</h1><p>next() is the function used to hand over the Action to the next Middleware. In other words, every Action received by Middleware will be the action passed by the previous Middleware call next(). If there is no next Middleware, it will let the Reducer handle it. Here is a simple example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const middleware1 = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">  next(action);</span><br><span class="line">&#125;;</span><br><span class="line">const middleware2 = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">  next(action);</span><br><span class="line">&#125;;</span><br><span class="line">const reducer = (state, action) =&gt; &#123;&#125;</span><br><span class="line">// create store &amp; use middleware</span><br><span class="line">store.dispatch(action);</span><br></pre></td></tr></table></figure><ol><li>When the Store dispatches an aAction, if there is Middleware, it will be processed by the first Middleware, otherwise it will be directly handled by the Reducer.</li><li>middleware1 is the first Middleware, received the action dispatched by store, call next() to hand over the Action to the next Middleware (middleware2).</li><li>middleware2 receives the action dispatched by middleware1, calls next() to hand over the Action to the next Middleware.</li><li>Because middleware2 is the last Middleware, the Reducer handles middleware2’s dispatched actions.<br><br><br></li></ol><h1 id="What-is-the-return-value-of-calling-next-in-Middleware"><a href="#What-is-the-return-value-of-calling-next-in-Middleware" class="headerlink" title="What is the return value of calling next() in Middleware?"></a>What is the return value of calling next() in Middleware?</h1><p>Each Middleware return value will be obtained by calling next() in the previous Middleware. That is to say, the return value of calling next() in Middleware will be the value of the next Middleware return. If it is calling next() in the last Middleware, the return value will be the incoming action itself, for example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const middleware1 = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">  const value = next(action);</span><br><span class="line">  <span class="built_in">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line">const middleware2 = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">  const value = next(action);</span><br><span class="line">  <span class="built_in">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line">// creatw store &amp; use middleware</span><br><span class="line">const value = store.dispatch(action);</span><br></pre></td></tr></table></figure><ol><li>The last Middleware (middleware2) call next() will return the incoming Action.</li><li>middleware1 calling next() will return the value of the next Middleware (middleware2) return.</li><li>Finally, store.dispatch() will return the value of the first Middleware (middleware1) return.</li></ol><p>The complete sample code is attached below to demonstrate the execution sequence of calling next() and the execution result of its return value. Click on the console button below to see the results:</p><iframe     src="https://codesandbox.io/embed/next-ismo4?fontsize=14&hidenavigation=1&theme=dark"     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"     title="next"     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"     sandbox="allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"   ></iframe><br><br><h1 id="Is-there-a-return-in-Middleware"><a href="#Is-there-a-return-in-Middleware" class="headerlink" title="Is there a return in Middleware?"></a>Is there a return in Middleware?</h1><p>Not necessarily. If there is no return in Middleware, calling next() in the previous Middleware will return undefined (if there is no return in the first Middleware, then calling store.dispatch() will return undefined). Generally speaking, Middleware can return any types of data, but if there is no special requirement, it is recommended to directly return the value returned by calling next(), to ensure that calling store.dispatch() can get the dispatch action.<br><br></p><h1 id="Can-I-get-the-current-state-in-Middleware"><a href="#Can-I-get-the-current-state-in-Middleware" class="headerlink" title="Can I get the current state in Middleware?"></a>Can I get the current state in Middleware?</h1><p>Of course can. One of the reasons Middleware is written as store =&gt; next =&gt; action =&gt; {} is to allow developers to get the store parameters in Middleware and get the current state through store.getState().<br><br></p><h1 id="What-happens-when-I-call-store-dispatch-in-Middleware"><a href="#What-happens-when-I-call-store-dispatch-in-Middleware" class="headerlink" title="What happens when I call store.dispatch() in Middleware?"></a>What happens when I call store.dispatch() in Middleware?</h1><p>The parameters of the store in Middleware can call getState() to get the current state, or you can call dispatch to send an action. The difference from calling next() is that the action of dispatching through next() is send to the next Middleware, and the action dispatched through store.dispatch() will go through all Middleware again (from the following picture you can understand the difference between the two).</p><p><img src="https://drive.google.com/uc?export=view&id=1BpyhmyaQTUU6vD16SyXwGPf6kTffiYps" alt="Middleware flow"><br><br></p><p>Next article - <a href="http://tingkaiwu.com/2019/02/09/deep-dive-into-middleware-3/">Dive into Middleware - Principles</a><br><br><br><br><br></p><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/@max80713/%E8%A9%B3%E8%A7%A3-redux-middleware-efd6a506357e" target="_blank" rel="noopener">https://medium.com/@max80713/redux-middleware-efd6a506357e</a><br><a href="https://medium.com/@WendellLiu/redux-middleware%E5%A4%A7%E7%95%A5%E6%9E%B6%E6%A7%8B-ace7e646c929" target="_blank" rel="noopener">https://medium.com/@WendellLiu/redux-middleware-ace7e646c929</a></p>]]></content>
    
    <summary type="html">
    
      How to build a Middleware?
    
    </summary>
    
    
      <category term="Middleware Trilogy" scheme="http://tingkaiwu.com/categories/Middleware-Trilogy/"/>
    
    
      <category term="Middleware" scheme="http://tingkaiwu.com/tags/Middleware/"/>
    
      <category term="Redux" scheme="http://tingkaiwu.com/tags/Redux/"/>
    
      <category term="React" scheme="http://tingkaiwu.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Dive into Middleware - Introduction</title>
    <link href="http://tingkaiwu.com/2019/01/29/deep-dive-into-middleware-1/"/>
    <id>http://tingkaiwu.com/2019/01/29/deep-dive-into-middleware-1/</id>
    <published>2019-01-29T15:38:51.000Z</published>
    <updated>2020-06-18T20:15:49.486Z</updated>
    
    <content type="html"><![CDATA[<p>Middleware is also called intermediary layer or middle layer. Middleware applications can be seen in many back-end server frameworks. Simply put, Middleware can process everything from the predefined start point to the end point.</p><a id="more"></a><br><h1 id="What-role-in-Redux"><a href="#What-role-in-Redux" class="headerlink" title="What role in Redux?"></a>What role in Redux?</h1><p>Redux Middleware can perform additional processing after the Action is assigned and before entering the Reducer, such as calling the API and so on. </p><p><img src="https://drive.google.com/uc?export=view&id=1EUk3RATpGN3UgOWTGhhE8xpvvKJ8_4qe" alt="Middleware&#39;s role"><br><br></p><h1 id="How-to-use-Middleware"><a href="#How-to-use-Middleware" class="headerlink" title="How to use Middleware?"></a>How to use Middleware?</h1><p>Passing one or more middleware into the applyMiddleware() function provided by Redux will return an Enhancer, and then pass the Enhancer as a parameter to createStore() function.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; applyMiddleware, createStore &#125; from <span class="string">'redux'</span>;</span><br><span class="line">const enhancer = applyMiddleware(</span><br><span class="line">  middlewareOne,</span><br><span class="line">  middlewareTwo</span><br><span class="line">);</span><br><span class="line">const store = createStore(</span><br><span class="line">  reducers,</span><br><span class="line">  initialState,</span><br><span class="line">  enhancer</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p>Next article - <a href="http://tingkaiwu.com/2019/02/03/deep-dive-into-middleware-2/">Dive into Middleware - Implementation</a><br><br><br><br><br></p><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/@max80713/%E8%A9%B3%E8%A7%A3-redux-middleware-efd6a506357e" target="_blank" rel="noopener">https://medium.com/@max80713/redux-middleware-efd6a506357e</a><br><a href="https://images.app.goo.gl/PjjzpBaYGNcZrpq87" target="_blank" rel="noopener">https://images.app.goo.gl/PjjzpBaYGNcZrpq87</a></p>]]></content>
    
    <summary type="html">
    
      Middleware can process everything from the predefined start point to the end point.
    
    </summary>
    
    
      <category term="Middleware Trilogy" scheme="http://tingkaiwu.com/categories/Middleware-Trilogy/"/>
    
    
      <category term="Middleware" scheme="http://tingkaiwu.com/tags/Middleware/"/>
    
      <category term="Redux" scheme="http://tingkaiwu.com/tags/Redux/"/>
    
      <category term="React" scheme="http://tingkaiwu.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>High level overview of Redux</title>
    <link href="http://tingkaiwu.com/2019/01/17/high-level-overview-of-redux/"/>
    <id>http://tingkaiwu.com/2019/01/17/high-level-overview-of-redux/</id>
    <published>2019-01-17T10:22:34.000Z</published>
    <updated>2020-06-18T19:32:03.173Z</updated>
    
    <content type="html"><![CDATA[<p>Redux is inspired by Flux and Elm architecture. So, be sure to understand what Flux is before reading this article. Flux is a one-way data flow design pattern that helps you write a structured front-end architecture. If you want to explore Flux in more depth, you can refer to this - <a href="http://tingkaiwu.com/2019/01/12/lets-talk-about-flux/">LET’S TALK ABOUT FLUX</a></p><a id="more"></a><br><h1 id="Quick-walkthrough-Flux"><a href="#Quick-walkthrough-Flux" class="headerlink" title="Quick walkthrough Flux"></a>Quick walkthrough Flux</h1><p><img src="https://drive.google.com/uc?export=view&id=1wqpOMUrlUZqzEXpS1hfoVouA9XPEEddl" alt="Flux flow"><br><strong>Pros:</strong></p><ul><li>One-way data flow: The behavior of changing data must go through Action, Dispatcher, and then to the Store.</li><li>Single Source of Truth: The data is stored in the Store in a unified manner, and all the data required by the Viewer must be obtained from the Store.</li><li>Use a clearer model to regulate the flow of data in complex interaction scenarios of data and pages.</li></ul><p><strong>Cons:</strong></p><ul><li>The store contains logic and state. When we need to dynamically replace the logic of a store, we can only replace the entire store, and then we cannot maintain the state stored in the store.<br><br><br></li></ul><h1 id="Redux-vs-Flux"><a href="#Redux-vs-Flux" class="headerlink" title="Redux vs Flux"></a>Redux vs Flux</h1><p><img src="https://drive.google.com/uc?export=view&id=1LZcMODJi0K8fKsq6ckYzWLiSqAAg83tb" alt="Redux vs Flux"></p><table><thead><tr><th align="left">Flux</th><th align="left">Redux</th></tr></thead><tbody><tr><td align="left">Flux provides Dispatcher to deliver action objects to each store</td><td align="left">Redux Store provides dispatch API to deliver action objects</td></tr><tr><td align="left">Flux has multiple stores</td><td align="left">Redux has only one store</td></tr><tr><td align="left">Data is stored in each store</td><td align="left">Data is stored in a state object and managed by the Store</td></tr><tr><td align="left">Business logic is stored in each store</td><td align="left">Business logic corresponds to multiple Reducers functions</td></tr></tbody></table><p><br><br></p><h1 id="Redux-core-concepts"><a href="#Redux-core-concepts" class="headerlink" title="Redux core concepts"></a>Redux core concepts</h1><p><img src="https://drive.google.com/uc?export=view&id=1zSL7wx_mmzSHksm3sPkmt0CvdiXCNHu8" alt="Redux core concepts"></p><ul><li>Single state tree</li><li>Action description changes</li><li>Reducer implementation changes<br><br><br></li></ul><h1 id="Redux-from-the-code"><a href="#Redux-from-the-code" class="headerlink" title="Redux from the code"></a>Redux from the code</h1><p>The concept of Store in Redux is very simple, the following code:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> listeners = []</span><br><span class="line">// 1. Only one status tree <span class="keyword">in</span> Redux <span class="built_in">which</span> stores all data</span><br><span class="line"><span class="built_in">let</span> state</span><br><span class="line"></span><br><span class="line">// 2. When user trigger events, call store.dispatch(action)</span><br><span class="line"><span class="keyword">function</span> dispatch(action) &#123;</span><br><span class="line">  // 3. Get the latest status according to reducer</span><br><span class="line">  state = reducer(state, action)</span><br><span class="line">  // 4. Notify all listener store status has changed</span><br><span class="line">  listeners.slice().forEach(l =&gt; l())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 5. Call the getter API to get the latest status</span><br><span class="line">//    when the viewer knows that the Store status has changed</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getState</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 6. Let viewer registration status change listener</span><br><span class="line"><span class="keyword">function</span> subscribe(listener) &#123;</span><br><span class="line">  listeners.push(listener)</span><br><span class="line">  // 7. Return unsubscribe <span class="keyword">function</span></span><br><span class="line">  <span class="built_in">return</span> () =&gt; listeners.filter(l =&gt; l !== listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Redux is a very simple state container that manages the state of the entire application. You can not change the data directly through the setter, new data must be obtained through the action and reducers.</p><p>The reducer returns new data based on the action object and old data, so you can store the action and call the reducer function again to get the same state. It helps us with predictable state management.</p><p>Therefore, Redux can be summarized in a sentence:</p><p><strong>“Redux is a predictable state container for JavaScript apps.”</strong><br><br><br><br><br></p><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/4cats-io/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-redux-7b08403c4957" target="_blank" rel="noopener">https://medium.com/4cats-io/-redux-7b08403c4957</a><br><a href="https://blog.quizup.com/react-in-retrospective-quizup-db1dcc0dc8a1" target="_blank" rel="noopener">https://blog.quizup.com/react-in-retrospective-quizup-db1dcc0dc8a1</a><br><a href="https://blog.csdn.net/DFF1993/article/details/80403309" target="_blank" rel="noopener">https://blog.csdn.net/DFF1993/article/details/80403309</a></p>]]></content>
    
    <summary type="html">
    
      “Redux is a predictable state container for JavaScript apps.”
    
    </summary>
    
    
      <category term="Redux Origin" scheme="http://tingkaiwu.com/categories/Redux-Origin/"/>
    
    
      <category term="Redux" scheme="http://tingkaiwu.com/tags/Redux/"/>
    
      <category term="React" scheme="http://tingkaiwu.com/tags/React/"/>
    
      <category term="Flux" scheme="http://tingkaiwu.com/tags/Flux/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s talk about Flux</title>
    <link href="http://tingkaiwu.com/2019/01/12/lets-talk-about-flux/"/>
    <id>http://tingkaiwu.com/2019/01/12/lets-talk-about-flux/</id>
    <published>2019-01-12T05:33:37.000Z</published>
    <updated>2020-06-18T19:32:03.065Z</updated>
    
    <content type="html"><![CDATA[<p>In the highly interactive front-end applications, the data state of the application and the user’s operation events are the most vexing. Therefore, when we are dealing with complex interactions such as “event changes state, state refresh UI”. A pattern is needed to regulate the data flow of the application. Flux is used to solve these problems.</p><a id="more"></a><br><h1 id="Flux-origin"><a href="#Flux-origin" class="headerlink" title="Flux origin"></a>Flux origin</h1><p>Flux is a design concept proposed by Facebook. Its most important thinking is one-way data flow.</p><p><img src="https://drive.google.com/uc?export=view&id=10I3eiAoPrFEtccK7mW52vP9eK22Aqpw5" alt="Flux vs MVC"></p><p>Although not all MVC implementations are as shown above. It is easy to cause maintenance problems because of the two-way data flow. However, Flux clearly defines the roles’ responsibilities and each role’s interactions, which improves maintainability. Flux is a one-way data flow design concept, not a library, so it has a variety of implementations.<br><br></p><h1 id="Flux-composition"><a href="#Flux-composition" class="headerlink" title="Flux composition"></a>Flux composition</h1><p><img src="https://drive.google.com/uc?export=view&id=1wqpOMUrlUZqzEXpS1hfoVouA9XPEEddl" alt="Flux flow"><br><strong>The main roles in Flux:</strong></p><ul><li>Action: Standardize all actions to change data, so you can quickly master the behavior of the entire App.</li><li>Action Creator: Responsible for creating action and passing action to dispatcher.</li><li>Dispatcher: Inform all registered stores of the current behavior.</li><li>Store: Store data and business logic, and only provide getter API for other modules to obtain data.</li><li>Controller View: Responsible for registering the listener with the store, and obtaining the latest data to pass to the view.</li><li>View: Render the UI according to the data and listen to the user’s operation events.<br><br><br></li></ul><h1 id="Flux-process-flow"><a href="#Flux-process-flow" class="headerlink" title="Flux process flow"></a>Flux process flow</h1><p><img src="https://drive.google.com/uc?export=view&id=16ALtl2eboAq5JfV37lL45DIaj_NfcUoh" alt="Flux flow detail"></p><ol><li>User operation app.</li><li>Action creator creates the action and passes it to dispatcher.</li><li>The dispatcher sequentially passes the action to the store.</li><li>The store determines whether the data needs to be updated according to the action type.</li><li>If the data is updated, then trigger the controller view listener.</li><li>Controller view gets the latest data from the store.</li><li>View re-renders the UI based on the data.<br><br><br></li></ol><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Flux is a one-way data flow design pattern that helps you write a structured front-end architecture.</p><p>The benefits Flux brings to you are:</p><ol><li>You can quickly master the behavior in the entire app.</li><li>Information and business logic are also stored uniformly.</li><li>Let View only need to be responsible for the layout of the UI.<br><br><br><br><br></li></ol><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/4cats-io/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-flux-44a48c320e11" target="_blank" rel="noopener">https://medium.com/4cats-io/flux-44a48c320e11</a><br><a href="https://medium.com/@w3bh4ck/the-flux-architecture-pattern-for-frontend-development-1f2dae32b789" target="_blank" rel="noopener">https://medium.com/@w3bh4ck/the-flux-architecture-pattern</a></p>]]></content>
    
    <summary type="html">
    
      Flux is a one-way data flow design pattern that helps you write a structured front-end architecture.
    
    </summary>
    
    
      <category term="Redux Origin" scheme="http://tingkaiwu.com/categories/Redux-Origin/"/>
    
    
      <category term="Redux" scheme="http://tingkaiwu.com/tags/Redux/"/>
    
      <category term="React" scheme="http://tingkaiwu.com/tags/React/"/>
    
      <category term="Flux" scheme="http://tingkaiwu.com/tags/Flux/"/>
    
  </entry>
  
</feed>
