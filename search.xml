<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>High level overview of Redux</title>
      <link href="/2019/01/17/high-level-overview-of-redux/"/>
      <url>/2019/01/17/high-level-overview-of-redux/</url>
      
        <content type="html"><![CDATA[<p>Redux is inspired by Flux and Elm architecture. So, be sure to understand what Flux is before reading this article. Flux is a one-way data flow design pattern that helps you write a structured front-end architecture. If you want to explore Flux in more depth, you can refer to this - <a href="http://tingkaiwu.com/2019/01/12/lets-talk-about-flux/">LET’S TALK ABOUT FLUX</a></p><a id="more"></a><h1 id="Quick-overview-Flux"><a href="#Quick-overview-Flux" class="headerlink" title="Quick overview Flux"></a>Quick overview Flux</h1><p><img src="https://drive.google.com/uc?export=view&id=1wqpOMUrlUZqzEXpS1hfoVouA9XPEEddl" alt="Flux flow"></p><ol><li>One-way data flow: The behavior of changing data must go through Action, Dispatcher, and then to the Store.</li><li>Single Source of Truth: The data is stored in the Store in a unified manner, and all the data required by the Viewer must be obtained from the Store.</li><li>Use a clearer model to regulate the flow of data in complex interaction scenarios of data and pages.</li></ol>]]></content>
      
      
      <categories>
          
          <category> React Ecosystem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
            <tag> Flux </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Let&#39;s talk about Flux</title>
      <link href="/2019/01/12/lets-talk-about-flux/"/>
      <url>/2019/01/12/lets-talk-about-flux/</url>
      
        <content type="html"><![CDATA[<p>In the highly interactive front-end applications, the data state of the application and the user’s operation events are the most vexing. Therefore, when we are dealing with complex interactions such as “event changes state, state refresh UI”. A pattern is needed to regulate the data flow of the application. Flux is used to solve these problems.</p><a id="more"></a><br><h1 id="Flux-origin"><a href="#Flux-origin" class="headerlink" title="Flux origin"></a>Flux origin</h1><p>Flux is a design concept proposed by Facebook. Its most important thinking is one-way data flow.</p><p><img src="https://drive.google.com/uc?export=view&id=10I3eiAoPrFEtccK7mW52vP9eK22Aqpw5" alt="Flux vs MVC"></p><p>Although not all MVC implementations are as shown above. It is easy to cause maintenance problems because of the two-way data flow. However, Flux clearly defines the roles’ responsibilities and each role’s interactions, which improves maintainability. Flux is a one-way data flow design concept, not a library, so it has a variety of implementations.<br><br></p><h1 id="Flux-composition"><a href="#Flux-composition" class="headerlink" title="Flux composition"></a>Flux composition</h1><p><img src="https://drive.google.com/uc?export=view&id=1wqpOMUrlUZqzEXpS1hfoVouA9XPEEddl" alt="Flux flow"><br><strong>The main roles in Flux:</strong></p><ul><li>Action: Standardize all actions to change data, so you can quickly master the behavior of the entire App.</li><li>Action Creator: Responsible for creating action and passing action to dispatcher.</li><li>Dispatcher: Inform all registered stores of the current behavior.</li><li>Store: Store data and business logic, and only provide getter API for other modules to obtain data.</li><li>Controller View: Responsible for registering the listener with the store, and obtaining the latest data to pass to the view.</li><li>View: Render the UI according to the data and listen to the user’s operation events.<br><br><br></li></ul><h1 id="Flux-process-flow"><a href="#Flux-process-flow" class="headerlink" title="Flux process flow"></a>Flux process flow</h1><p><img src="https://drive.google.com/uc?export=view&id=16ALtl2eboAq5JfV37lL45DIaj_NfcUoh" alt="Flux flow detail"></p><ol><li>User operation app.</li><li>Action creator creates the action and passes it to dispatcher.</li><li>The dispatcher sequentially passes the action to the store.</li><li>The store determines whether the data needs to be updated according to the action type.</li><li>If the data is updated, then trigger the controller view listener.</li><li>Controller view gets the latest data from the store.</li><li>View re-renders the UI based on the data.<br><br><br></li></ol><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Flux is a one-way data flow design pattern that helps you write a structured front-end architecture.</p><p>The benefits Flux brings to you are:</p><ol><li>You can quickly master the behavior in the entire app.</li><li>Information and business logic are also stored uniformly.</li><li>Let View only need to be responsible for the layout of the UI.<br><br><br><br><br></li></ol><hr><p><strong>Reference link:</strong><br><a href="https://medium.com/4cats-io/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-flux-44a48c320e11" target="_blank" rel="noopener">https://medium.com/4cats-io/flux-44a48c320e11</a><br><a href="https://medium.com/@w3bh4ck/the-flux-architecture-pattern-for-frontend-development-1f2dae32b789" target="_blank" rel="noopener">https://medium.com/@w3bh4ck/the-flux-architecture-pattern</a></p>]]></content>
      
      
      <categories>
          
          <category> React Ecosystem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
            <tag> Flux </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
